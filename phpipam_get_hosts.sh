#!/bin/bash

# phpipam_get_hosts gets hosts of a subnet from phpipam and writes a reservation file suitable for ISC DHCP
# Copyright (C) 2022 Daniele Albrizio
# 
# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.
# 
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.

# Needs curl getopts gq
# Fetches hosts for a particular subnet from phpipam and writes them to an isc dhcp hosts file
# Optionally:
#  - runs a command if file has changed
#  - writes ddns hostname
#  - filters on phpipam ip status (numeric tag) field

# Create a read only API key inside your phpipam web app and fill the following fields:
apiAppID=""
apiToken=""
serverFQDN=""

###########

function show_help () {
        cat <<EOB

phpipam_get_hosts gets hosts of a subnet from phpipam and writes a reservation file suitable for ISC DHCP

Usage: $(basename "$0") -u <phpipam subnet number> -o <isc-dhcpd host file> [-r <run on modified>] [-d] [-<AROD>]
Where legal args are:
-h              Print this message
-u              phpipam subnet url (last number from subnet url)
-o              isc-dhcpd host file (to include in a subnet inside dhcpd.conf)
-r              Specifies a command to run upon configuration change
-d              Fill in dynamic dns fields for hostname
-A|-R|-O|-D     Fetch only records whose state is respectively Active, Reserved, Offline, DHCP (Dynamic). Defaults to Active

EOB
        exit 4
}

while getopts :v?h?u:o:r:dAROD*? flag
do
    case "${flag}" in
        v) set -x ;;
        u) subnetnum=$OPTARG ;;
        o) iscfile=$OPTARG ;;
        r) modified_run_cmd=$OPTARG ;;
        d) ddns=true ;;
        A) tag=2 ;; # State: Active
        R) tag=3 ;; # State: Reserved
        O) tag=1 ;; # State: Offline
        D) tag=4 ;; # State: DHCP (dynamic)
        h) show_help ;;
        :) show_help ;;
        ?) show_help ;;
    esac
done

if [ ! "$iscfile" ] || [ ! "$subnetnum" ]; then
  echo "ERROR: arguments -u and -o must be provided"
  show_help
fi

###########

[ $tag == "" ] && tag=2

echo "# List of hosts for ISC DHCP Server generated by $0" > $iscfile.tmp

curl -s GET https://$serverFQDN/api/$apiAppID/subnets/$subnetnum/addresses/ --header "token: $apiToken" | \
        jq -r '.data[] | select(.tag=="'$tag'") | select(.mac | length == 17) | [.tag, .mac, .ip, .hostname] | @csv' | \
        tr -d \" | \
        while IFS="," read tag mac ip hostname
        do
                # No mac? No reservation needed (phpipam usually gives canonicalized mac strings, perhaps we protect from some weird cases e.g. imports)
                if [[ ! $mac =~ ^([a-f0-9]{2}:){5}[a-f0-9]{2}$ ]] ; then
                        continue
                fi
                # No hostname? Generate one.
                [ "$hostname" == "" ] && hostname=noname
                # Format as unique using its own mac address
                iscdhcp_hostname=`echo $hostname-$mac | tr -d :`
                host=`echo $hostname | cut -d"." -f1`
                if [ $ddns == "true" ] ; then
                        echo "host $iscdhcp_hostname { hardware ethernet $mac; fixed-address $ip; ddns-hostname \"$host\"; option host-name \"$host\"; }"  >> $iscfile.tmp
                else
                        echo "host $iscdhcp_hostname { hardware ethernet $mac; fixed-address $ip; }" >> $iscfile.tmp
                fi
        done
        # Check if modified
        cmp -s $iscfile $iscfile.tmp
        if [ $? -ne 0 ] ; then
                # Overwrite the hosts file
                cp $iscfile.tmp $iscfile
                # Delete temporary file
                unlink $iscfile.tmp
                # Execute the if_modified user command
                echo $modified_run_cmd | sh
        else
                # Delete temporary file
                unlink $iscfile.tmp
        fi


